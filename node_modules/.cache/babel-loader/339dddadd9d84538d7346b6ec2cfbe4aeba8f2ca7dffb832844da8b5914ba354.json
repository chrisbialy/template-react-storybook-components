{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\template-react-storybook-components2\\\\src\\\\storybook\\\\Search.stories.tsx\";\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar __STORY__ = \"import { ComponentMeta, ComponentStory } from '@storybook/react';\\r\\n\\r\\nimport { Search } from '../components/Search';\\r\\n\\r\\nexport default {\\r\\n  title: 'Search',\\r\\n  component: Search,\\r\\n  parameters: { actions: { argTypesRegex: '^on.*' } },\\r\\n} as ComponentMeta<typeof Search>;\\r\\n\\r\\nconst getHints = async (query: string) =>\\r\\n  new Promise<string[]>((resolve) => {\\r\\n    setTimeout(() => {\\r\\n      resolve([`${query} suggestion 1`, `${query} suggestion 2`, `${query} suggestion 3`]);\\r\\n    }, 300);\\r\\n  });\\r\\nconst Template: ComponentStory<typeof Search> = (args) => <Search {...args} getHints={getHints} />;\\r\\n\\r\\nexport const SearchExample = Template.bind({});\\r\\nSearchExample.args = { buttonFill: 'solid', buttonVariant: 'primary' };\\r\\n\";\n// @ts-ignore\nvar __LOCATIONS_MAP__ = {\n  \"SearchExample\": {\n    \"startLoc\": {\n      \"col\": 48,\n      \"line\": 17\n    },\n    \"endLoc\": {\n      \"col\": 98,\n      \"line\": 17\n    },\n    \"startBody\": {\n      \"col\": 48,\n      \"line\": 17\n    },\n    \"endBody\": {\n      \"col\": 98,\n      \"line\": 17\n    }\n  }\n};\nimport { Search } from '../components/Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default {\n  title: 'Search',\n  component: Search,\n  parameters: {\n    actions: {\n      argTypesRegex: '^on.*'\n    }\n  }\n};\nconst getHints = async query => new Promise(resolve => {\n  setTimeout(() => {\n    resolve([`${query} suggestion 1`, `${query} suggestion 2`, `${query} suggestion 3`]);\n  }, 300);\n});\nconst Template = args => /*#__PURE__*/_jsxDEV(Search, {\n  ...args,\n  getHints: getHints\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 25,\n  columnNumber: 59\n}, this);\n_c = Template;\nexport const SearchExample = Template.bind({});\nSearchExample.args = {\n  buttonFill: 'solid',\n  buttonVariant: 'primary'\n};\nSearchExample.parameters = {\n  storySource: {\n    source: \"(args) => <Search {...args} getHints={getHints} />\"\n  },\n  ...SearchExample.parameters\n};\nvar _c;\n$RefreshReg$(_c, \"Template\");\nexport const __namedExportsOrder = [\"SearchExample\"];","map":{"version":3,"names":["__STORY__","__LOCATIONS_MAP__","Search","jsxDEV","_jsxDEV","title","component","parameters","actions","argTypesRegex","getHints","query","Promise","resolve","setTimeout","Template","args","fileName","_jsxFileName","lineNumber","columnNumber","_c","SearchExample","bind","buttonFill","buttonVariant","storySource","source","$RefreshReg$","__namedExportsOrder"],"sources":["C:/repos/template-react-storybook-components2/src/storybook/Search.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { ComponentMeta, ComponentStory } from '@storybook/react';\\r\\n\\r\\nimport { Search } from '../components/Search';\\r\\n\\r\\nexport default {\\r\\n  title: 'Search',\\r\\n  component: Search,\\r\\n  parameters: { actions: { argTypesRegex: '^on.*' } },\\r\\n} as ComponentMeta<typeof Search>;\\r\\n\\r\\nconst getHints = async (query: string) =>\\r\\n  new Promise<string[]>((resolve) => {\\r\\n    setTimeout(() => {\\r\\n      resolve([`${query} suggestion 1`, `${query} suggestion 2`, `${query} suggestion 3`]);\\r\\n    }, 300);\\r\\n  });\\r\\nconst Template: ComponentStory<typeof Search> = (args) => <Search {...args} getHints={getHints} />;\\r\\n\\r\\nexport const SearchExample = Template.bind({});\\r\\nSearchExample.args = { buttonFill: 'solid', buttonVariant: 'primary' };\\r\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"SearchExample\":{\"startLoc\":{\"col\":48,\"line\":17},\"endLoc\":{\"col\":98,\"line\":17},\"startBody\":{\"col\":48,\"line\":17},\"endBody\":{\"col\":98,\"line\":17}}};\n    \nimport { ComponentMeta, ComponentStory } from '@storybook/react';\r\n\r\nimport { Search } from '../components/Search';\r\n\r\nexport default {\r\n  title: 'Search',\r\n  component: Search,\r\n  parameters: { actions: { argTypesRegex: '^on.*' } },\r\n} as ComponentMeta<typeof Search>;\r\n\r\nconst getHints = async (query: string) =>\r\n  new Promise<string[]>((resolve) => {\r\n    setTimeout(() => {\r\n      resolve([`${query} suggestion 1`, `${query} suggestion 2`, `${query} suggestion 3`]);\r\n    }, 300);\r\n  });\r\nconst Template: ComponentStory<typeof Search> = (args) => <Search {...args} getHints={getHints} />;\r\n\r\nexport const SearchExample = Template.bind({});\r\nSearchExample.args = { buttonFill: 'solid', buttonVariant: 'primary' };\r\n\n\n\nSearchExample.parameters = { storySource: { source: \"(args) => <Search {...args} getHints={getHints} />\" }, ...SearchExample.parameters };"],"mappings":";AACI;AACA;AACA;AACA,IAAIA,SAAS,GAAG,yvBAAyvB;AACzwB;AACA,IAAIC,iBAAiB,GAAG;EAAC,eAAe,EAAC;IAAC,UAAU,EAAC;MAAC,KAAK,EAAC,EAAE;MAAC,MAAM,EAAC;IAAE,CAAC;IAAC,QAAQ,EAAC;MAAC,KAAK,EAAC,EAAE;MAAC,MAAM,EAAC;IAAE,CAAC;IAAC,WAAW,EAAC;MAAC,KAAK,EAAC,EAAE;MAAC,MAAM,EAAC;IAAE,CAAC;IAAC,SAAS,EAAC;MAAC,KAAK,EAAC,EAAE;MAAC,MAAM,EAAC;IAAE;EAAC;AAAC,CAAC;AAI7K,SAASC,MAAM,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe;EACbC,KAAK,EAAE,QAAQ;EACfC,SAAS,EAAEJ,MAAM;EACjBK,UAAU,EAAE;IAAEC,OAAO,EAAE;MAAEC,aAAa,EAAE;IAAQ;EAAE;AACpD,CAAC;AAED,MAAMC,QAAQ,GAAG,MAAOC,KAAa,IACnC,IAAIC,OAAO,CAAYC,OAAO,IAAK;EACjCC,UAAU,CAAC,MAAM;IACfD,OAAO,CAAC,CAAC,GAAGF,KAAK,eAAe,EAAE,GAAGA,KAAK,eAAe,EAAE,GAAGA,KAAK,eAAe,CAAC,CAAC;EACtF,CAAC,EAAE,GAAG,CAAC;AACT,CAAC,CAAC;AACJ,MAAMI,QAAuC,GAAIC,IAAI,iBAAKZ,OAAA,CAACF,MAAM;EAAA,GAAKc,IAAI;EAAEN,QAAQ,EAAEA;AAAS;EAAAO,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC;AAACC,EAAA,GAA7FN,QAAuC;AAE7C,OAAO,MAAMO,aAAa,GAAGP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;AAC9CD,aAAa,CAACN,IAAI,GAAG;EAAEQ,UAAU,EAAE,OAAO;EAAEC,aAAa,EAAE;AAAU,CAAC;AAItEH,aAAa,CAACf,UAAU,GAAG;EAAEmB,WAAW,EAAE;IAAEC,MAAM,EAAE;EAAqD,CAAC;EAAE,GAAGL,aAAa,CAACf;AAAW,CAAC;AAAC,IAAAc,EAAA;AAAAO,YAAA,CAAAP,EAAA;AAAA,aAAAQ,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}